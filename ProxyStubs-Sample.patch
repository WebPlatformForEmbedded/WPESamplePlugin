diff --git a/Source/interfaces/ProxyStubs.cpp b/Source/interfaces/ProxyStubs.cpp
index 71875f1..9f3477f 100644
--- a/Source/interfaces/ProxyStubs.cpp
+++ b/Source/interfaces/ProxyStubs.cpp
@@ -17,6 +17,8 @@
 #include "IWebDriver.h"
 #include "IWebServer.h"
 
+#include "ISample.h"
+
 MODULE_NAME_DECLARATION(BUILDREF_WEBBRIDGE)
 
 namespace WPEFramework {
@@ -1001,6 +1003,53 @@ namespace ProxyStubs {
     };
     // IWebServer interface stub definitions
 
+    //
+    // ISample interface stub definitions (interface/ISample.h)
+    //
+    ProxyStub::MethodHandler SampleStubMethods[] = {
+        [](Core::ProxyType<Core::IPCChannel>& channel, Core::ProxyType<RPC::InvokeMessage>& message) {
+            // virtual uint32_t Configure(PluginHost::IShell* framework) = 0;
+            RPC::Data::Input& parameters(message->Parameters());
+            RPC::Data::Frame::Reader reader(parameters.Reader());
+            RPC::Data::Frame::Writer writer(message->Response().Writer());
+
+            PluginHost::IShell* implementation = reader.Number<PluginHost::IShell*>();
+            PluginHost::IShell* proxy = RPC::Administrator::Instance().CreateProxy<PluginHost::IShell>(channel, implementation, true, false);
+
+            ASSERT((proxy != nullptr) && "Failed to create proxy");
+
+            if (proxy == nullptr) {
+                TRACE_L1(_T("Could not create a stub for IGuide: %p"), implementation);
+                writer.Number<uint32_t>(Core::ERROR_RPC_CALL_FAILED);
+            }
+            else {
+                writer.Number(parameters.Implementation<ISample>()->Configure(proxy));
+                if (proxy->Release() != Core::ERROR_NONE) {
+                    TRACE_L1("Oops seems like we did not maintain a reference to this sink. %d", __LINE__);
+                }
+            }
+        },
+        [](Core::ProxyType<Core::IPCChannel>& channel VARIABLE_IS_NOT_USED, Core::ProxyType<RPC::InvokeMessage>& message) { 
+            //
+            // virtual void SampleSet(const string& path) = 0;
+            //
+            RPC::Data::Frame::Reader parameters(message->Parameters().Reader());
+            string path(parameters.Text());
+
+            message->Parameters().Implementation<ISample>()->SampleSet(path);
+        },
+        [](Core::ProxyType<Core::IPCChannel>& channel VARIABLE_IS_NOT_USED, Core::ProxyType<RPC::InvokeMessage>& message) { 
+            //
+            // virtual string SampleGet() const = 0;
+            //
+            string str = message->Parameters().Implementation<ISample>()->SampleGet();
+            RPC::Data::Frame::Writer output(message->Response().Writer());
+            output.Text(str);
+        },
+        nullptr
+    };
+    // ISample interface stub definitions
+
     ProxyStub::MethodHandler AVNClientStubMethods[] = {
         [](Core::ProxyType<Core::IPCChannel>& channel, Core::ProxyType<RPC::InvokeMessage>& message) {
             // virtual uint32_t Configure(PluginHost::IShell* framework) = 0;
@@ -1570,6 +1619,7 @@ namespace ProxyStubs {
     typedef ProxyStub::StubType<IRPCLink, RPCLinkStubMethods, ProxyStub::UnknownStub> RPCLinkStub;
     typedef ProxyStub::StubType<IRPCLink::INotification, RPCLinkNotificationStubMethods, ProxyStub::UnknownStub> RPCLinkNotificationStub;
     typedef ProxyStub::StubType<IPlayGiga, PlayGigaStubMethods, ProxyStub::UnknownStub> PlayGigaStub;
+    typedef ProxyStub::StubType<ISample, SampleStubMethods, ProxyStub::UnknownStub> SampleStub;
     typedef ProxyStub::StubType<IPower, PowerStubMethods, ProxyStub::UnknownStub> PowerStub;
 
     // -------------------------------------------------------------------------------------------
@@ -2466,6 +2516,45 @@ namespace ProxyStubs {
         }
     };
 
+    class SampleProxy : public ProxyStub::UnknownProxyType<ISample> {
+    public:
+        SampleProxy(Core::ProxyType<Core::IPCChannel>& channel, void* implementation, const bool otherSideInformed)
+            : BaseClass(channel, implementation, otherSideInformed)
+        {
+        }
+
+        virtual ~SampleProxy()
+        {
+        }
+
+    public:
+        virtual uint32_t Configure(PluginHost::IShell* service)
+        {
+            IPCMessage newMessage(BaseClass::Message(0));
+            RPC::Data::Frame::Writer writer(newMessage->Parameters().Writer());
+            writer.Number<PluginHost::IShell*>(service);
+            Invoke(newMessage);
+            return (newMessage->Response().Reader().Number<uint32_t>());
+        }
+        virtual void SampleSet(const string& str)
+        {
+            IPCMessage newMessage(BaseClass::Message(1));
+            RPC::Data::Frame::Writer writer(newMessage->Parameters().Writer());
+            writer.Text(str);
+            Invoke(newMessage);
+        }
+
+        virtual string SampleGet() const
+        {
+            IPCMessage newMessage(BaseClass::Message(2));
+            Invoke(newMessage);
+
+            RPC::Data::Frame::Reader reader(newMessage->Response().Reader());
+            string str = reader.Text();
+            return str;
+        }
+    };
+
     class AVNClientProxy : public ProxyStub::UnknownProxyType<IAVNClient> {
     public:
         AVNClientProxy(Core::ProxyType<Core::IPCChannel>& channel, void* implementation, const bool otherSideInformed)
@@ -3016,7 +3105,7 @@ namespace ProxyStubs {
             : BaseClass(channel, implementation, otherSideInformed)
         {
         }
- 
+
         virtual ~PowerProxy()
         {
         }
@@ -3048,7 +3137,7 @@ namespace ProxyStubs {
             IPCMessage newMessage(BaseClass::Message(2));
             Invoke(newMessage);
         }
- 
+
     };
 
     // -------------------------------------------------------------------------------------------
@@ -3088,6 +3177,7 @@ namespace ProxyStubs {
             RPC::Administrator::Instance().Announce<IRPCLink::INotification, RPCLinkNotificationProxy, RPCLinkNotificationStub>();
             RPC::Administrator::Instance().Announce<IPlayGiga, PlayGigaProxy, PlayGigaStub>();
             RPC::Administrator::Instance().Announce<IPower, PowerProxy, PowerStub>();
+            RPC::Administrator::Instance().Announce<ISample, SampleProxy, SampleStub>();
         }
 
         ~Instantiation()
